#include:
#  - docker-include.medienhaus-spaces.websecure.yml
#  - docker-include.medienhaus-api.websecure.yml
#  - docker-include.medienhaus-cms.websecure.yml

services:

  # ------------------------------------------------------
  # traefik
  # ------------------------------------------------------

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      #- "--log.level=DEBUG"
      #- "--api.dashboard=true"
      #- "--api.debug=true"
      #- "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ADMIN_CONTACT_LETSENCRYPT}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # NOTE: https://www.authelia.com/integration/proxies/fowarded-headers/
      # TODO: check and validate trusted ip ranges below ...
      - "--entrypoints.web.forwardedheaders.insecure=false"
      - "--entryPoints.web.forwardedheaders.trustedips=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7"
      - "--entrypoints.web.proxyprotocol.insecure=false"
      - "--entryPoints.web.proxyprotocol.trustedips=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7"
      - "--entrypoints.websecure.forwardedheaders.insecure=false"
      - "--entrypoints.websecure.forwardedheaders.trustedips=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7"
      - "--entrypoints.websecure.proxyprotocol.insecure=false"
      - "--entrypoints.websecure.proxyprotocol.trustedips=10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,fc00::/7"
    #labels:
    #  traefik.enable: "true"
    #  #traefik.http.routers.api.entrypoints: "web"
    #  traefik.http.routers.api.entrypoints: "websecure"
    #  traefik.http.routers.api.tls.certresolver: "myresolver"
    #  traefik.http.routers.api.rule: "Host(`traefik.${BASE_URL}`)"
    #  traefik.http.routers.api.service: "api@internal"
    ports:
      - "80:80"
      #- "8080:8080"
      - "443:443"
      #- "8443:8443"
    volumes:
      - ./data/letsencrypt:/letsencrypt:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # ------------------------------------------------------
  # authelia
  # ------------------------------------------------------

  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    restart: unless-stopped
    depends_on:
      - traefik
    #command:
    #  - "authelia"
    #  - "--config=/config/configuration.yml"
    #  - "--config=/config/configuration.acl.yml"
    environment:
      AUTHELIA_THEME: "auto"
      AUTHELIA_LOG_LEVEL: "debug"
      AUTHELIA_STORAGE_LOCAL_PATH: "/data/db.sqlite3"
      AUTHELIA_ACCESS_CONTROL_DEFAULT_POLICY: "one_factor"
      AUTHELIA_SESSION_DOMAIN: "${AUTHELIA_SESSION_DOMAIN}"
      #AUTHELIA_DEFAULT_REDIRECTION_URL: "${HTTP_SCHEMA}://${AUTHELIA_DEFAULT_REDIRECTION_URL}"
      AUTHELIA_NOTIFIER_SMTP_HOST: "${AUTHELIA_NOTIFIER_SMTP_HOST}"
      AUTHELIA_NOTIFIER_SMTP_PORT: "${AUTHELIA_NOTIFIER_SMTP_PORT}"
      AUTHELIA_NOTIFIER_SMTP_USERNAME: "${AUTHELIA_NOTIFIER_SMTP_USERNAME}"
      AUTHELIA_NOTIFIER_SMTP_SENDER: "${AUTHELIA_NOTIFIER_SMTP_SENDER}"
      AUTHELIA_NOTIFIER_SMTP_SUBJECT: "${AUTHELIA_NOTIFIER_SMTP_SUBJECT}"
      AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS: "${AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS}"
      AUTHELIA_NOTIFIER_SMTP_DISABLE_HTML_EMAILS: "${AUTHELIA_NOTIFIER_SMTP_DISABLE_HTML_EMAILS}"
      AUTHELIA_AUTHENTICATION_BACKEND_PASSWORD_RESET_DISABLE: "${AUTHELIA_AUTHENTICATION_BACKEND_PASSWORD_RESET_DISABLE}"
      # TODO: conditional environment variable; might not be set
      #AUTHELIA_AUTHENTICATION_BACKEND_PASSWORD_RESET_CUSTOM_URL: "${AUTHELIA_AUTHENTICATION_BACKEND_PASSWORD_RESET_CUSTOM_URL}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_IMPLEMENTATION: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_IMPLEMENTATION}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_URL: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_URL}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN}"
      # TODO: conditional environment variable; might not be set
      #AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_USERS_DN: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_USERS_DN}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERS_FILTER: "(&({username_attribute}={input})(objectClass=person))"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_GROUPS_FILTER: "(&(member={dn})(objectClass=groupOfNames))"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERNAME_ATTRIBUTE: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERNAME_ATTRIBUTE}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_MAIL_ATTRIBUTE: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_MAIL_ATTRIBUTE}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_DISPLAY_NAME_ATTRIBUTE: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_DISPLAY_NAME_ATTRIBUTE}"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: "${AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER}"
      # NOTE: https://docs.docker.com/compose/use-secrets/
      AUTHELIA_JWT_SECRET_FILE: "/run/secrets/JWT_SECRET"
      AUTHELIA_SESSION_SECRET_FILE: "/run/secrets/SESSION_SECRET"
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: "/run/secrets/NOTIFIER_SMTP_PASSWORD"
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: "/run/secrets/STORAGE_ENCRYPTION_KEY"
      AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE: "/run/secrets/IDENTITY_PROVIDERS_OIDC_HMAC_SECRET"
      AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE: "/run/secrets/AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE: "/run/secrets/AUTHENTICATION_BACKEND_LDAP_PASSWORD"
    labels:
      traefik.enable: "true"
      #traefik.http.routers.authelia.entrypoints: "web"
      traefik.http.routers.authelia.entrypoints: "websecure"
      traefik.http.routers.authelia.tls.certresolver: "myresolver"
      traefik.http.routers.authelia.rule: "Host(`${AUTHELIA_HOSTNAME}`)"
      # NOTE: https://www.authelia.com/integration/proxies/traefik/
      traefik.http.middlewares.authelia.forwardauth.address: "http://authelia:9091/api/verify?rd=https%3A%2F%2F${AUTHELIA_HOSTNAME}%2F"
      traefik.http.middlewares.authelia.forwardauth.trustforwardheader: "true"
      traefik.http.middlewares.authelia.forwardauth.authresponseheaders: "Remote-User,Remote-Groups,Remote-Name,Remote-Email"
      #traefik.http.middlewares.authelia-basic.forwardauth.address: "http://authelia:9091/api/verify?auth=basic"
      #traefik.http.middlewares.authelia-basic.forwardauth.trustforwardheader: "true"
      #traefik.http.middlewares.authelia-basic.forwardauth.authresponseheaders: "Remote-User,Remote-Groups,Remote-Name,Remote-Email"
    # NOTE: authelia does not expose ports automatically
    expose:
      - "9091"
    #ports:
    #  - "9091:9091"
    volumes:
      - ./config/authelia-configuration.yml:/config/configuration.yml:ro
      - ./data/authelia:/data:rw
      - ./secrets/authelia:/run/secrets:ro

  # ------------------------------------------------------
  # lldap
  # ------------------------------------------------------

  lldap:
    image: lldap/lldap:latest
    container_name: lldap
    restart: unless-stopped
    depends_on:
      - traefik
    environment:
      #LLDAP_VERBOSE: true
      #LLDAP_LDAP_HOST: "${LDAP_HOST}"
      LLDAP_LDAP_PORT: "${LDAP_PORT}"
      #LLDAP_HTTP_HOST: "${LDAP_HOST}"
      LLDAP_HTTP_PORT: "80"
      #LLDAP_HTTP_URL: "${HTTP_SCHEMA}://${LDAP_HOSTNAME}"
      LLDAP_JWT_SECRET: "${LDAP_JWT_SECRET}"
      LLDAP_LDAP_BASE_DN: "${LDAP_BASE_DN}"
      LLDAP_USER_DN: "${LDAP_BIND_USER}"
      LLDAP_USER_EMAIL: "${LDAP_BIND_EMAIL}"
      LLDAP_LDAP_USER_PASS: "${LDAP_BIND_PASSWORD}"
      #LLDAP_DATABASE_URL: "sqlite:///data/users.db?mode=rwc"
      ##LLDAP_DATABASE_URL: "mysql://mysql-user:password@mysql-server/my-database"
      ##LLDAP_DATABASE_URL: "postgres://postgres-user:password@postgres-server/my-database"
      #LLDAP_KEY_FILE: "/data/private_key"
      #LLDAP_KEY_SEED: "${LDAP_KEY_SEED}"
      LLDAP_ENABLE_PASSWORT_RESET: false
      #LLDAP_SMTP_OPTIONS__SERVER: "${SMTP_HOST}"
      #LLDAP_SMTP_OPTIONS__PORT: "${SMTP_PORT}"
      #LLDAP_SMTP_OPTIONS__SMTP_ENCRYPTION: "${SMTP_ENCRYPTION}"
      #LLDAP_SMTP_OPTIONS__USER: "${SMTP_USERNAME}"
      #LLDAP_SMTP_OPTIONS__PASSWORD: "${SMTP_PASSWORD}"
      #LLDAP_SMTP_OPTIONS__FROM: "${SMTP_FROM}"
      #LLDAP_SMTP_OPTIONS__REPLY_TO: "${SMTP_REPLY_TO}"
      #LLDAP_LDAPS_OPTIONS__ENABLED: true
      #LLDAP_LDAPS_OPTIONS__CERT_FILE: "/path/to/certfile.crt"
      #LLDAP_LDAPS_OPTIONS__KEY_FILE: "/path/to/keyfile.key"
      UID: "0"
      GID: "0"
      #TZ: "UTC"
    labels:
      traefik.enable: "true"
      #traefik.http.routers.lldap.entrypoints: "web"
      traefik.http.routers.lldap.entrypoints: "websecure"
      traefik.http.routers.lldap.tls.certresolver: "myresolver"
      traefik.http.routers.lldap.rule: "Host(`${LDAP_HOSTNAME}`)"
    # NOTE: lldap does not expose ports automatically
    expose:
      - "80"
      - "${LDAP_PORT}"
    #ports:
    #  - "3890:3890"
    #  #- "6360:6360"
    #  - "17170:17170"
    volumes:
      - ./data/lldap:/data:rw

  # ------------------------------------------------------
  # etherpad
  # ------------------------------------------------------

  postgres-etherpad:
    image: postgres:latest
    container_name: postgres-etherpad
    restart: unless-stopped
    environment:
      POSTGRES_DB: "etherpad"
      POSTGRES_USER: "etherpad"
      POSTGRES_PASSWORD: "${ETHERPAD_POSTGRES_PASSWORD}"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U etherpad -lqt | cut -d \\| -f 1 | grep -wq etherpad" ]
    #ports:
    #  - "5432:5432"
    volumes:
      - ./data/etherpad:/var/lib/postgresql/data:rw

  nginx-etherpad:
    image: nginx:latest
    container_name: nginx-etherpad
    restart: unless-stopped
    depends_on:
      - traefik
      - etherpad
    labels:
      traefik.enable: "true"
      #traefik.http.routers.nginx-etherpad.entrypoints: "web"
      traefik.http.routers.nginx-etherpad.entrypoints: "websecure"
      traefik.http.routers.nginx-etherpad.tls.certresolver: "myresolver"
      traefik.http.routers.nginx-etherpad.rule: "Host(`${ETHERPAD_HOSTNAME}`)"
    #ports:
    #  - "9001:80"
    volumes:
      - ./config/nginx-etherpad.conf:/etc/nginx/conf.d/default.conf:ro

  etherpad:
    build:
      context: ./etherpad-lite
      args:
        ETHERPAD_PLUGINS: "ep_adminpads2 ep_comments_page ep_headings2 ep_markdown ep_mypads"
    container_name: etherpad
    restart: unless-stopped
    # NOTE: if using authentik as identity provider, update the ldapauth-fork dependency in ep_mypads
    #command: sh -c "cd node_modules/ep_mypads/ && npm install ldapauth-fork@^5.0.5 && etherpad"
    depends_on:
      postgres-etherpad:
        condition: service_healthy
    #ports:
    #  - "9001:9001"
    volumes:
      - ./config/etherpad.json:/opt/etherpad-lite/settings.json:ro
      #- ./config/etherpad-mypads.configuration.js:/opt/etherpad-lite/node_modules/ep_mypads/configuration.js:ro
      - ./etherpad-skin-medienhaus:/opt/etherpad-lite/src/static/skins/medienhaus:ro

  # ------------------------------------------------------
  # spacedeck
  # ------------------------------------------------------

  postgres-spacedeck:
    image: postgres:latest
    container_name: postgres-spacedeck
    restart: unless-stopped
    environment:
      POSTGRES_DB: "spacedeck"
      POSTGRES_USER: "spacedeck"
      POSTGRES_PASSWORD: "${SPACEDECK_POSTGRES_PASSWORD}"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U spacedeck -lqt | cut -d \\| -f 1 | grep -wq spacedeck" ]
    #ports:
    #  - "5432:5432"
    volumes:
      - ./data/spacedeck/database:/var/lib/postgresql/data:rw

  nginx-spacedeck:
    image: nginx:latest
    container_name: nginx-spacedeck
    restart: unless-stopped
    depends_on:
      - traefik
      - spacedeck
    labels:
      traefik.enable: "true"
      #traefik.http.routers.nginx-spacedeck.entrypoints: "web"
      traefik.http.routers.nginx-spacedeck.entrypoints: "websecure"
      traefik.http.routers.nginx-spacedeck.tls.certresolver: "myresolver"
      traefik.http.routers.nginx-spacedeck.rule: "Host(`${SPACEDECK_HOSTNAME}`)"
    #ports:
    #  - "9666:80"
    volumes:
      - ./config/nginx-spacedeck.conf:/etc/nginx/conf.d/default.conf:ro

  spacedeck:
    build: ./spacedeck-open
    container_name: spacedeck
    restart: unless-stopped
    stop_grace_period: 1s
    depends_on:
      postgres-spacedeck:
        condition: service_healthy
    #ports:
    #  - "9666:9666"
    volumes:
      - ./config/spacedeck.json:/app/config/default.json:ro
      - ./data/spacedeck/storage:/app/storage:rw

  # ------------------------------------------------------
  # matrix-synapse
  # ------------------------------------------------------

  postgres-matrix-synapse:
    image: postgres:latest
    container_name: postgres-matrix-synapse
    restart: unless-stopped
    environment:
      POSTGRES_DB: "synapse"
      POSTGRES_USER: "synapse"
      POSTGRES_PASSWORD: "${MATRIX_POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U synapse -lqt | cut -d \\| -f 1 | grep -wq synapse" ]
    #ports:
    #  - "5432:5432"
    volumes:
      - ./data/matrix-synapse/database:/var/lib/postgresql/data:rw

  nginx-matrix-synapse:
    image: nginx:latest
    container_name: nginx-matrix-synapse
    restart: unless-stopped
    depends_on:
      - traefik
      - matrix-synapse
    labels:
      traefik.enable: "true"
      #traefik.http.routers.nginx-matrix-synapse.entrypoints: "web"
      traefik.http.routers.nginx-matrix-synapse.entrypoints: "websecure"
      traefik.http.routers.nginx-matrix-synapse.tls.certresolver: "myresolver"
      traefik.http.routers.nginx-matrix-synapse.rule: "Host(`${MATRIX_BASEURL}`)"
    #ports:
    #  - "8008:80"
    #  #- "8448:443"
    volumes:
      - ./config/nginx-matrix-synapse.conf:/etc/nginx/conf.d/default.conf:ro

  matrix-synapse:
    image: matrixdotorg/synapse:latest
    container_name: matrix-synapse
    restart: unless-stopped
    depends_on:
      postgres-matrix-synapse:
        condition: service_healthy
    environment:
      SYNAPSE_CONFIG_DIR: "/etc/matrix-synapse"
      SYNAPSE_CONFIG_PATH: "/etc/matrix-synapse/homeserver.yaml"
      SYNAPSE_DATA_DIR: "/data"
      UID: "0"
      GID: "0"
    #ports:
    #  - "8008:8008"
    #  #- "8448:8448"
    volumes:
      - ./data/matrix-synapse/synapse:/data:rw
      - ./config/matrix-synapse.yaml:/etc/matrix-synapse/homeserver.yaml:ro

  #synapse-admin:
  #  build:
  #    context: https://github.com/Awesome-Technologies/synapse-admin.git
  #    args:
  #      REACT_APP_SERVER: "${HTTP_SCHEMA}://${MATRIX_SERVERNAME}"
  #  container_name: synapse-admin
  #  restart: unless-stopped
  #  depends_on:
  #    - traefik
  #  labels:
  #    traefik.enable: "true"
  #    #traefik.http.routers.synapse-admin.entrypoints: "web"
  #    traefik.http.routers.synapse-admin.entrypoints: "websecure"
  #    traefik.http.routers.synapse-admin.tls.certresolver: "myresolver"
  #    traefik.http.routers.synapse-admin.rule: "Host(`synapse-admin.${SPACES_HOSTNAME}`)"
  #  #ports:
  #  #  - "8080:80"

  # ------------------------------------------------------
  # element
  # ------------------------------------------------------

  element:
    image: vectorim/element-web:latest
    container_name: element
    restart: unless-stopped
    depends_on:
      - traefik
      - matrix-synapse
    labels:
      traefik.enable: "true"
      #traefik.http.routers.element.entrypoints: "web"
      traefik.http.routers.element.entrypoints: "websecure"
      traefik.http.routers.element.tls.certresolver: "myresolver"
      traefik.http.routers.element.rule: "Host(`${ELEMENT_HOSTNAME}`)"
    volumes:
      - ./config/element.json:/app/config.json:ro

# ------------------------------------------------------
# networks (example)
# ------------------------------------------------------

#networks:
#  default:
#    name: medienhaus-spaces
#    driver: bridge
#    external: true

# ------------------------------------------------------
# volumes (example)
# ------------------------------------------------------

#volumes:
#  medienhaus-spaces--node_modules:
#    driver: local
#  medienhaus-spaces--.next:
#    driver: local
