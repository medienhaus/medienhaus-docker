#issuer: "http://dex:5556/dex"
issuer: "${HTTP_SCHEMA}://${DEX_HOSTNAME}/dex"

storage:
  type: sqlite3
  config:
    file: /var/dex/dex.db

web:
  http: "0.0.0.0:5556"
  #http: "dex:5556"
  #http: "${HTTP_SCHEMA}://${DEX_HOSTNAME}"

  # Uncomment to enable HTTPS endpoint.
  # https: 127.0.0.1:5554
  # tlsCert: /etc/dex/tls.crt
  # tlsKey: /etc/dex/tls.key
  # tlsMinVersion: 1.2
  # tlsMaxVersion: 1.3

# frontend:
#   issuer: dex
#   logoURL: theme/logo.png
#   dir: ""
#   theme: light

# telemetry:
#   http: 127.0.0.1:5558

# logger:
#   level: "debug"
#   format: "text" # can also be "json"

# grpc:
#   addr: 127.0.0.1:5557
#   tlsCert: examples/grpc-client/server.crt
#   tlsKey: examples/grpc-client/server.key
#   tlsClientCA: examples/grpc-client/ca.crt

# expiry:
#   deviceRequests: "5m"
#   signingKeys: "6h"
#   idTokens: "24h"
#   refreshTokens:
#     disableRotation: false
#     reuseInterval: "3s"
#     validIfNotUsedFor: "2160h" # 90 days
#     absoluteLifetime: "3960h" # 165 days

# oauth2:
#   responseTypes: [ "code" ] # also allowed are "token" and "id_token"
#   skipApprovalScreen: false
#   alwaysShowLoginScreen: false
#   passwordConnector: local

staticClients:
  - id: synapse
    redirectURIs:
      - "${HTTP_SCHEMA}://${MATRIX_BASEURL}/_synapse/client/oidc/callback"
    name: "Synapse"
    secret: "${MATRIX_OIDC_CLIENT_SECRET}"

connectors:
  - type: ldap
    id: ldap
    name: LDAP
    config:
      host: "${LDAP_HOST}:${LDAP_PORT}"
      # insecureNoSSL: true
      # insecureSkipVerify: true
      startTLS: ${LDAP_STARTTLS}
      # rootCA: /etc/dex/ldap.ca
      # rootCAData: ( base64 encoded PEM file )
      bindDN: "${LDAP_BIND_DN}"
      bindPW: "${LDAP_BIND_PASSWORD}"
      # usernamePrompt: SSO Username
      userSearch:
        baseDN: "${LDAP_SEARCH_BASE}"
        #filter: "(objectClass=person)"
        username: "${LDAP_ATTRIBUTE_UID}"
        idAttr: "${LDAP_ATTRIBUTE_UID}"
        emailAttr: "${LDAP_ATTRIBUTE_MAIL}"
        nameAttr: "${LDAP_ATTRIBUTE_NAME}"
        preferredUsernameAttr: "${LDAP_ATTRIBUTE_UID}"
      groupSearch:
        baseDN: "${LDAP_SEARCH_BASE}"
        filter: "(objectClass=group)"
        userMatchers:
        - userAttr: "${LDAP_ATTRIBUTE_UID}"
          groupAttr: member
          #groupAttr: "${LDAP_ATTRIBUTE_GROUP}"
        nameAttr: "${LDAP_ATTRIBUTE_NAME}"

enablePasswordDB: false

# staticPasswords: []
